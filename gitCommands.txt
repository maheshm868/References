// commiting your changes - pushing your changes to a repository

git status
git add .
git commit -m "some style corrections" --no-verify
git pull origin branchName
git push origin branchName
git status

// deploying spfx solution

gulp clean --ship
gulp build --ship
gulp bundle --ship
gulp package-solution --ship

// cloning 

git clone urlForTheRepository


https://marque360.com/aggregating-sharepoint-list-data-in-power-bi/

#######################################################

gulp serve
gulp serve --max_old_space_size=8192

// linting command 

npm run lint:html
npm run format //

if file not found error then Take files from temp/deploy/copy all files and paste it in CDN path of the solution

########################################################
a.	git pull – Use this command to pull all the files in your local
b.	git status – Use this command to know which files are checked out by you
c.	git add <file url from git status> – Use this command to add files ONE by ONE.
d.	git add . – Use this command to add all the files at once.
e.	git commit -m “check in comment” – use this command to commit all the changes which are added using git add
f.	git push origin dev – use this command to push all the changes to GIT. Until push is done, that change will not available to the team.
9.	Make sure that you always work on dev branch. In case you are on master  branch, use git checkout dev  to switch to dev branch.

=====to reset local repo to one as remote repo======
git fetch origin
git reset --hard origin/master =>master or branch u need to restore
=====To remove the untracted files if any===========
git clean -n -f
git clean -f
=========to delete local test==========
https://stackoverflow.com/questions/3046436/how-do-you-stop-tracking-a-remote-branch-in-git


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
While pushing code to dev branch ---
1. Checkout to dev branch - git checkout Dev
2. git merge Mahesh
3. git pull origin Dev -- verify manually that all changes are available in local system.
4. git push origin Dev


Move to branch where change is to be merged
git checkout mahesh
git merge Phase2
git push origin mahesh
 
 
While merging always make sure changes are in local

Check status before pushing to your branch

?loadSPFX=true&debugManifestsFile=https%3A%2F%2Flocalhost%3A4321%2Ftemp%2Fmanifests.js

Mastering SharePoint Framework SPFx Development
    
Beginning Modern JavaScript (Includes 10 Real Projects) (udemy.com) - 21.5
The Modern JavaScript Bootcamp: Complete JavaScript Tutorial (udemy.com) - 29.5
https://eylearning.udemy.com/course/advanced-javascript-concepts/ - 25


////////////////////////////SAVE LOCAL PROJECT//////////////////////////
If you are planning to push out a new local branch that
will track its remote counterpart, you may want to use
"git push -u" to set the upstream config as you push.

1. git remote add StyleSheetLoader urlOfRepo

and then push using the remote name

2. git push StyleSheetLoader


/////////////Push an existing repository from command line//////////////

git remote add origin UrlOfRepo
git push -u origin --all

////////////////////////

gulp serve --nobrowser --max_old_space_size=8192

gulp bundle --max_old_space_size=8192 --ship


////////////////////////////

In order to avoid this error we need to increase nodejs heap size. On Windows it can be done by the following method:

Run the following command in your terminal client:
setx -m NODE_OPTIONS "--max-old-space-size=8192"

(after that NOTE_OPTIONS should be added to PC > Advanced properties > Environment variables)
Restart terminal session which is used for running gulp to ensure that new env variables will be applied.
Run web server:
     gulp serve --nobrowser
After that your solution should be built without heap out of memory error.


---------------------------------git cheat sheet--------------------------------------

Git Glossary

git

Git is an open source program to keep track of 
changes in your files. It just takes screen shots of your 
files when you save them, and then it compares the 
files for differences.

Informal Definition Formal Definition
Git is an open source program for tracking changes in text 
files. It was written by the author of the Linux operating system, 
and is the core technology that GitHub, the social and user 
interface, is built on top of.

branch

A branch is a mirror of your current repo. When you branch, 
your current repo (usually your main branch) goes 
untouched. This is great when you want to create a feature in 
your application, because you do not have to worry about 
breaking a working application since you are branched off of 
it.

A branch is a parallel version of a repository. It is contained 
within the repository, but does not affect the primary or master
branch allowing you to work freely without disrupting the 
"live" version. When you've made the changes you want to 
make, you can merge your branch back into the master branch 
to publish your changes.

clone

A clone is when you “clone” a remote repository and receive 
a local copy for your own modification. Git will keep track of 
all your modifications locally, so you don’t have to depend 
on the reliability of the server. 

A clone is a copy of a repository that lives on your computer instead 
of on a website's server somewhere, or the act of making that copy. 
With your clone you can edit the files in your preferred editor and 
use Git to keep track of your changes without having to be online. It 
is, however, connected to the remote version so that changes can 
be synced between the two. You can push your local changes to the 
remote to keep them synced when you're online.

push

note: if you commit changes locally, it will not effect the files on the remote 
repository. If you want your files to be in sync with the files on the remote 
repository, you will want you do a push.

A push is how you get your local files to a remote 
repo so your team will have the option to pull your 
latest modifications.

Pushing refers to sending your committed changes to a 
remote repository such as GitHub.com. For instance, if you 
change something locally, you'd want to then push those 
changes so that others may access them.

merge

Merge is a definition within itself. If you were working on a 
branch in which you have your working feature built, and you 
want to merge that feature back to the master branch, you 
will need to do a merge. It combines them into one.

Merging takes the changes from one branch (in the same 
repository or from a fork), and applies them into another. This 
often happens as a Pull Request (which can be thought of as a 
request to merge), or via the command line. A merge can be 
done automatically via a Pull Request via the GitHub.com web 
interface if there are no conflicting changes, or can always be 
done via the command line. See Merging a pull request.

pull

A pull gets the latest code from a remote 
repository. When you do a pull, it also does a 
merge. A pull is basically a fetch and a merge.

Pull refers to when you are fetching in changes and merging 
them. For instance, if someone has edited the remote file 
you're both working on, you'll want to pull in those changes to 
your local copy so that it's up to date.

fetch

A fetch is a pull without the merge. This is helpful if 
you want to compare the code your team has put 
together before deciding to merge it to your local 
repository.

Fetching refers to getting the latest changes from an online 
repository (like GitHub.com) without merging them in. Once 
these changes are fetched you can compare them to your 
local branches (the code residing on your local machine).
checkout

Checkout lets you navigate between branches.
The git checkout command lets you navigate between the 
branches created by git branch. Checking out a branch 
updates the files in the working directory to match the version 
stored in that branch, and it tells Git to record all new commits 
on that branch.
